<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Pythonic Perambulations]]></title>
  <link href="http://jakevdp.github.com/atom.xml" rel="self"/>
  <link href="http://jakevdp.github.com/"/>
  <updated>2012-08-16T15:32:56-07:00</updated>
  <id>http://jakevdp.github.com/</id>
  <author>
    <name><![CDATA[Jake Vanderplas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Memoryview Benchmarks 2]]></title>
    <link href="http://jakevdp.github.com/blog/2012/08/16/memoryview-benchmarks-2/"/>
    <updated>2012-08-16T14:19:00-07:00</updated>
    <id>http://jakevdp.github.com/blog/2012/08/16/memoryview-benchmarks-2</id>
    <content type="html"><![CDATA[<p>In the <a href="http://jakevdp.github.com/blog/2012/08/08/memoryview-benchmarks/">previous post</a>, I explored
how cython typed memoryviews can be used to speed up repeated array
operations.  It became clear that typed memoryviews are superior to
the ndarray syntax for slicing, and as fast as raw pointers for single
element access.  In the comments, Mathieu brought up an interesting
question: is the ndarray syntax as good as typed memoryviews if you&#8217;re
not doing slicing?</p>

<p>The answer turns out to be yes, <em>unless</em> the compiler tries to inline your
function.</p>

<!-- more -->


<h3>Inlined Memoryview</h3>

<p>We&#8217;ll use a slightly simpler benchmark script here for simplicity.  We&#8217;ll
use inlined typed memoryviews for the inner function, and call this function
within an outer loop:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='cython'><span class='line'><span class="k">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span><span class='line'><span class="k">cimport</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span><span class='line'><span class="k">cimport</span> <span class="nn">cython</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@cython</span><span class="o">.</span><span class="n">boundscheck</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'><span class="nd">@cython</span><span class="o">.</span><span class="n">wraparound</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'><span class="k">cdef</span> <span class="kr">inline</span> <span class="kt">double</span> <span class="nf">inner_func</span><span class="p">(</span><span class="n">double</span><span class="p">[:,</span> <span class="p">::</span><span class="mf">1</span><span class="p">]</span> <span class="n">X</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">X</span><span class="p">[</span><span class="mf">0</span><span class="p">,</span> <span class="mf">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">loop_1</span><span class="p">(</span><span class="nb">int</span> <span class="n">N</span><span class="p">,</span> <span class="n">switch</span><span class="o">=</span><span class="bp">True</span><span class="p">):</span>
</span><span class='line'>    <span class="k">cdef</span> <span class="kt">double</span>[<span class="p">:,</span> <span class="p">::</span><span class="mf">1</span><span class="p">]</span> <span class="n">X</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="mf">100</span><span class="p">,</span> <span class="mf">100</span><span class="p">))</span>
</span><span class='line'>    <span class="k">cdef</span> <span class="kt">int</span> <span class="nf">i</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
</span><span class='line'>        <span class="c"># this should be inlined by the compiler</span>
</span><span class='line'>        <span class="n">inner_func</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The inner function is called <code>N</code> times.  We&#8217;ve used the &#8220;inline&#8221; keyword here:
it turns out this is optional with common compiler optimizations turned on.
<code>gcc</code> and other compilers are smart enough to figure out that this function
should be inlined, even if the cython code doesn&#8217;t mark it as such.  Timing
the function on one million loops gives us our comparison benchmark:</p>

<pre><code>%timeit loop_1(1E6)
100000 loops, best of 3: 10.1 us per loop
</code></pre>

<p>Just over a millisecond to perform this loop one million times.</p>

<h3>Non-inlined Memoryview</h3>

<p>Because the compilers are generally so smart, we actually need to be a bit
clever to make sure our function is <em>not</em> inlined.  We&#8217;ll do that through
a switch statement in the loop call, which selects between two possible
inner functions.  This may seem a bit contrived, but it could come up
in practice: for example, if we wanted to create a KDTree for nearest neighbor
searches which can use one of several distance metrics within a single tree
framework, we might be tempted to try a solution like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='cython'><span class='line'><span class="k">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span><span class='line'><span class="k">cimport</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span><span class='line'><span class="k">cimport</span> <span class="nn">cython</span>
</span><span class='line'>
</span><span class='line'><span class="k">ctypedef</span> <span class="n">double</span> <span class="p">(</span><span class="o">*</span><span class="n">inner_func_ptr</span><span class="p">)(</span><span class="n">double</span><span class="p">[:,</span> <span class="p">::</span><span class="mf">1</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@cython</span><span class="o">.</span><span class="n">boundscheck</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'><span class="nd">@cython</span><span class="o">.</span><span class="n">wraparound</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'><span class="k">cdef</span> <span class="kt">double</span> <span class="nf">inner_func_1</span><span class="p">(</span><span class="n">double</span><span class="p">[:,</span> <span class="p">::</span><span class="mf">1</span><span class="p">]</span> <span class="n">X</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">X</span><span class="p">[</span><span class="mf">0</span><span class="p">,</span> <span class="mf">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@cython</span><span class="o">.</span><span class="n">boundscheck</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'><span class="nd">@cython</span><span class="o">.</span><span class="n">wraparound</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'><span class="k">cdef</span> <span class="kt">double</span> <span class="nf">inner_func_2</span><span class="p">(</span><span class="n">double</span><span class="p">[:,</span> <span class="p">::</span><span class="mf">1</span><span class="p">]</span> <span class="n">X</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">X</span><span class="p">[</span><span class="mf">0</span><span class="p">,</span> <span class="mf">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">loop_2</span><span class="p">(</span><span class="nb">int</span> <span class="n">N</span><span class="p">,</span> <span class="n">switch</span><span class="o">=</span><span class="bp">True</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># use a switch to ensure that inlining can&#39;t happen: compilers</span>
</span><span class='line'>    <span class="c"># are usually smart enough to figure it out otherwise.</span>
</span><span class='line'>    <span class="k">cdef</span> <span class="kt">inner_func_ptr</span> <span class="nf">func</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">switch</span><span class="p">:</span>
</span><span class='line'>        <span class="n">func</span> <span class="o">=</span> <span class="n">inner_func_1</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">func</span> <span class="o">=</span> <span class="n">inner_func_2</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">cdef</span> <span class="kt">double</span>[<span class="p">:,</span> <span class="p">::</span><span class="mf">1</span><span class="p">]</span> <span class="n">X</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="mf">100</span><span class="p">,</span> <span class="mf">100</span><span class="p">))</span>
</span><span class='line'>    <span class="k">cdef</span> <span class="kt">int</span> <span class="nf">i</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
</span><span class='line'>        <span class="n">func</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>By adding the switch function, it means the compiler cannot know at compile
time which of the inner functions will be used in the loop, and they
cannot be inlined.  The timing results are as follows:</p>

<pre><code>%timeit loop_2(1E6)
10 loops, best of 3: 22.9 ms per loop
</code></pre>

<p>Using a non-inlined function makes things significantly slower in this case!
So, if you&#8217;re repeatedly calling a small function, inlining can be <em>very</em>
important for optimal execution times.</p>

<h3>The Problem with ndarray</h3>

<p>It turns out that beyond slicing, the problem with the ndarray type is that
multi-dimensional arrays require relatively expensive buffer checks whenever
a function is called.  This causes similar code with ndarrays to be
significantly slower:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='cython'><span class='line'><span class="k">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span><span class='line'><span class="k">cimport</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span><span class='line'><span class="k">cimport</span> <span class="nn">cython</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@cython</span><span class="o">.</span><span class="n">boundscheck</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'><span class="nd">@cython</span><span class="o">.</span><span class="n">wraparound</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'><span class="k">cdef</span> <span class="kr">inline</span> <span class="kt">double</span> <span class="nf">inner_func</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">[</span><span class="n">double</span><span class="p">,</span> <span class="n">ndim</span><span class="o">=</span><span class="mf">2</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s">&#39;c&#39;</span><span class="p">]</span> <span class="n">X</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">X</span><span class="p">[</span><span class="mf">0</span><span class="p">,</span> <span class="mf">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">loop_3</span><span class="p">(</span><span class="nb">int</span> <span class="n">N</span><span class="p">,</span> <span class="n">switch</span><span class="o">=</span><span class="bp">True</span><span class="p">):</span>
</span><span class='line'>    <span class="k">cdef</span> <span class="kt">np</span>.<span class="kt">ndarray</span>[<span class="nf">double</span><span class="p">,</span> <span class="nf">ndim</span><span class="o">=</span><span class="mf">2</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s">&#39;c&#39;</span><span class="p">]</span> <span class="n">X</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="mf">100</span><span class="p">,</span> <span class="mf">100</span><span class="p">))</span>
</span><span class='line'>    <span class="k">cdef</span> <span class="kt">int</span> <span class="nf">i</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
</span><span class='line'>        <span class="n">inner_func</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Compiling this gives the following warning:</p>

<pre><code>warning: Buffer unpacking not optimized away.
</code></pre>

<p>The result of this buffer unpacking in each loop is a much slower execution
time:</p>

<pre><code>%timeit loop_3(1E6)
1 loops, best of 3: 617 ms per loop
</code></pre>

<p>This is about 30 times slower than the non-inlined version of the memoryview,
and 6000 times slower than the inlined memoryview above!
Is there any way around this?
Well, there are two options: raw pointers, or explicit inlining in the
code (that is, copying and pasting your code).  Both options will have
speeds similar to that of the inlined memoryviews, but each solution
is inconvenient in its own way.</p>

<p>So why wouldn&#8217;t you use memoryviews?  Well, several projects strive to
remain compatible with python 2.4 (one example is scipy) and python 2.4 is
not compatible with cython&#8217;s typed memoryviews.  Other projects seek to
remain compatible with earlier cython versions which don&#8217;t support
the relatively new memoryview syntax.
In these situations, one of the two partial solutions above
probably need to be used.  In practice, I have usually resorted to passing
around raw pointers.</p>

<h3>Summary</h3>

<p>Here are the timings we found above:</p>

<ul>
<li>Inlined memoryviews: 0.1 ms</li>
<li>Non-inlined memoryviews: 22.9 ms</li>
<li>Inlined ndarray: 617 ms</li>
</ul>


<p>So we see yet another reason that typed memoryviews are superior to
the ndarray syntax: they not only have very speedy slicing, but also
play well with the compiler&#8217;s inlining optimization.  Granted, these
time differences will be insignificant if your inlined function does
some non-negligible amount of computation, but there may be situations
where this affects things.</p>

<h3>Back to my problem</h3>

<p>If you recall, I started all of this because I wanted to create a binary tree
that can compute pairwise distances with arbitrary distance metrics.  Where
do these results put me?  Not in a great position, it turns out.  Abstracting
out the distance function so that the same machinery can be used with
different functions will lead to speed penalties from the inability to inline.
C++ libraries accomplish this through compile-time conditionals (i.e. templates)
but cython doesn&#8217;t have this capability.  Duplicating the tree
framework with a new hard-coded (and thus inlinable) distance metric may
be the only option.  That, or wrapping a templated C++ implementation.</p>

<p>All of the above scripts are available as an ipython
notebook: <a href="http://jakevdp.github.com/scripts/memview_bench_2.ipynb">memview_bench_2.ipynb</a>.
For information on how to view this file, see the
<a href="http://ipython.org/ipython-doc/dev/interactive/htmlnotebook.html">IPython page</a>
Alternatively, you can view this notebook (but not modify it) using the
nbviewer <a href="http://nbviewer.ipython.org/url/jakevdp.github.com/scripts/memview_bench_2.ipynb">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memoryview Benchmarks]]></title>
    <link href="http://jakevdp.github.com/blog/2012/08/08/memoryview-benchmarks/"/>
    <updated>2012-08-08T18:50:00-07:00</updated>
    <id>http://jakevdp.github.com/blog/2012/08/08/memoryview-benchmarks</id>
    <content type="html"><![CDATA[<p>There was recently a <a href="https://groups.google.com/forum/?fromgroups#!topic/cython-users/8uuxjB_wbBQ[1-25]" title="cython-users archive">thread</a>
on cython-users which caught my eye.  It has to do with
<a href="http://docs.cython.org/src/userguide/memoryviews.html">memoryviews</a>, a new
way of working with memory buffers in cython.</p>

<p>I&#8217;ve been thinking recently about how to do fast
and flexible memory buffer access in cython.  I contributed the
<a href="http://scikit-learn.org/stable/modules/generated/sklearn.neighbors.BallTree.html">BallTree</a>
implementation for nearest neighbors searching in
<a href="http://www.scikit-learn.org">scikit-learn</a>, and have been actively thinking
about how to make it faster and more flexible, including adding the ability
to specify distance metrics other than euclidean and minkowski.</p>

<p>In order to accomplish this, I&#8217;d like to have a set of distance metric
functions which take two vectors and compute a distance.  There would
be many functions with similar call signatures which could then be
plugged into a code that would iterate over a set of vectors and
compute the appropriate distances.</p>

<!-- more -->


<h3>Pure python version</h3>

<p>In pure python, the implementation described above might look something
like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># memview_bench_v1.py</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">euclidean_distance</span><span class="p">(</span><span class="n">x1</span><span class="p">,</span> <span class="n">x2</span><span class="p">):</span>
</span><span class='line'>    <span class="n">x1</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">asarray</span><span class="p">(</span><span class="n">x1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">x2</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">asarray</span><span class="p">(</span><span class="n">x2</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">((</span><span class="n">x1</span> <span class="o">-</span> <span class="n">x2</span><span class="p">)</span> <span class="o">**</span> <span class="mi">2</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This looks promising.  Let&#8217;s create a function based on this which will compute
the pairwise distance between all points in a matrix (this is similar
to <a href="http://scikit-learn.org/stable/modules/generated/sklearn.metrics.pairwise.pairwise_distances.html">pairwise_distances</a> in scikit-learn or
<a href="http://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.pdist.html">pdist</a> in scipy).  The simple form of the function might look
like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># memview_bench_v1 (continued)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">pairwise</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">metric</span><span class="o">=</span><span class="n">euclidean_distance</span><span class="p">):</span>
</span><span class='line'>    <span class="n">X</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">asarray</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">n_samples</span><span class="p">,</span> <span class="n">n_dim</span> <span class="o">=</span> <span class="n">X</span><span class="o">.</span><span class="n">shape</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">D</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">empty</span><span class="p">((</span><span class="n">n_samples</span><span class="p">,</span> <span class="n">n_samples</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n_samples</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n_samples</span><span class="p">):</span>
</span><span class='line'>            <span class="n">D</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">metric</span><span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">X</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">D</span>
</span></code></pre></td></tr></table></div></figure>


<p>We could exploit symmetry to reduce the number of computations required, but
we&#8217;ll skip that step for now: this simple version of the function will give
us a good benchmark for comparison with alternatives below.  Using the
<code>timeit</code> magic in ipython, we can learn how fast this implementation is:</p>

<pre><code>In [1]: import numpy as np

In [2]:from memview_bench_v1 import pairwise

In [3]: X = np.random.random((500, 3))

In [4]: timeit pairwise(X)
1 loops, best of 3: 6.51 s per loop
</code></pre>

<p>It takes nearly seven seconds to compute 250,000 distances.  This is much
too slow.</p>

<h3>Cython Speedup</h3>

<p>Perhaps we can speed this up using cython declarations.  Before typed
memoryviews were added in cython 0.16, the way to quickly index numpy
arrays in cython was through the numpy specific syntax, adding type
information to each array that specifies its data type, its dimension, and
its order:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='cython'><span class='line'><span class="c"># memview_bench.pyx</span>
</span><span class='line'><span class="k">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span><span class='line'>
</span><span class='line'><span class="k">cimport</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span><span class='line'><span class="k">from</span> <span class="nn">libc.math</span> <span class="k">cimport</span> <span class="n">sqrt</span>
</span><span class='line'><span class="k">cimport</span> <span class="nn">cython</span>
</span><span class='line'>
</span><span class='line'><span class="c"># define a function pointer to a metric</span>
</span><span class='line'><span class="k">ctypedef</span> <span class="n">double</span> <span class="p">(</span><span class="o">*</span><span class="n">metric_ptr</span><span class="p">)(</span><span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@cython</span><span class="o">.</span><span class="n">boundscheck</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'><span class="nd">@cython</span><span class="o">.</span><span class="n">wraparound</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'><span class="k">cdef</span> <span class="kt">double</span> <span class="nf">euclidean_distance</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">[</span><span class="n">double</span><span class="p">,</span> <span class="n">ndim</span><span class="o">=</span><span class="mf">1</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s">&#39;c&#39;</span><span class="p">]</span> <span class="n">x1</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">[</span><span class="n">double</span><span class="p">,</span> <span class="n">ndim</span><span class="o">=</span><span class="mf">1</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s">&#39;c&#39;</span><span class="p">]</span> <span class="n">x2</span><span class="p">):</span>
</span><span class='line'>    <span class="k">cdef</span> <span class="kt">double</span> <span class="nf">tmp</span><span class="p">,</span> <span class="nf">d</span>
</span><span class='line'>    <span class="k">cdef</span> <span class="kt">np</span>.<span class="kt">intp_t</span> <span class="nf">i</span><span class="p">,</span> <span class="nf">N</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">d</span> <span class="o">=</span> <span class="mf">0</span>
</span><span class='line'>    <span class="n">N</span> <span class="o">=</span> <span class="n">x1</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mf">0</span><span class="p">]</span>
</span><span class='line'>    <span class="c"># assume x2 has the same shape as x1.  This could be dangerous!</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
</span><span class='line'>        <span class="n">tmp</span> <span class="o">=</span> <span class="n">x1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">x2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>        <span class="n">d</span> <span class="o">+=</span> <span class="n">tmp</span> <span class="o">*</span> <span class="n">tmp</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nd">@cython</span><span class="o">.</span><span class="n">boundscheck</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'><span class="nd">@cython</span><span class="o">.</span><span class="n">wraparound</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">pairwise</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">[</span><span class="n">double</span><span class="p">,</span> <span class="n">ndim</span><span class="o">=</span><span class="mf">2</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s">&#39;c&#39;</span><span class="p">]</span> <span class="n">X</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">,</span>
</span><span class='line'>             <span class="n">metric</span> <span class="o">=</span> <span class="s">&#39;euclidean&#39;</span><span class="p">):</span>
</span><span class='line'>    <span class="k">cdef</span> <span class="kt">metric_ptr</span> <span class="nf">dist_func</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">metric</span> <span class="o">==</span> <span class="s">&#39;euclidean&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">dist_func</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">euclidean_distance</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;unrecognized metric&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">cdef</span> <span class="kt">np</span>.<span class="kt">intp_t</span> <span class="nf">i</span><span class="p">,</span> <span class="nf">j</span><span class="p">,</span> <span class="nf">n_samples</span>
</span><span class='line'>    <span class="n">n_samples</span> <span class="o">=</span> <span class="n">X</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mf">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">cdef</span> <span class="kt">np</span>.<span class="kt">ndarray</span>[<span class="nf">double</span><span class="p">,</span> <span class="nf">ndim</span><span class="o">=</span><span class="mf">2</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s">&#39;c&#39;</span><span class="p">]</span> <span class="n">D</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">empty</span><span class="p">((</span><span class="n">n_samples</span><span class="p">,</span>
</span><span class='line'>                                                            <span class="n">n_samples</span><span class="p">))</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n_samples</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n_samples</span><span class="p">):</span>
</span><span class='line'>            <span class="n">D</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">dist_func</span><span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">X</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">D</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that we&#8217;re essentially running the same code, except we have added
type identifiers to speed up function calls and loops.  The <code>mode='c'</code>
argument in the <code>np.ndarray</code> type says that the array is contiguous in
memory, and C-ordered.</p>

<p>For reference, this can be compiled in-place by running
<code>python setup.py build_ext --inplace</code> with the following
setup.py file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># setup.py</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">numpy</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">distutils.core</span> <span class="kn">import</span> <span class="n">setup</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">distutils.extension</span> <span class="kn">import</span> <span class="n">Extension</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">Cython.Distutils</span> <span class="kn">import</span> <span class="n">build_ext</span>
</span><span class='line'>
</span><span class='line'><span class="n">module</span> <span class="o">=</span> <span class="s">&#39;memview_bench_v2&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">setup</span><span class="p">(</span><span class="n">cmdclass</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;build_ext&#39;</span><span class="p">:</span> <span class="n">build_ext</span><span class="p">},</span>
</span><span class='line'>      <span class="n">name</span><span class="o">=</span><span class="n">module</span><span class="p">,</span>
</span><span class='line'>      <span class="n">version</span><span class="o">=</span><span class="s">&#39;1.0&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="n">ext_modules</span><span class="o">=</span><span class="p">[</span><span class="n">Extension</span><span class="p">(</span><span class="n">module</span><span class="p">,</span>
</span><span class='line'>                             <span class="p">[</span><span class="n">module</span> <span class="o">+</span> <span class="s">&quot;.pyx&quot;</span><span class="p">])],</span>
</span><span class='line'>      <span class="n">include_dirs</span><span class="o">=</span><span class="p">[</span><span class="n">numpy</span><span class="o">.</span><span class="n">get_include</span><span class="p">(),</span>
</span><span class='line'>                    <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">numpy</span><span class="o">.</span><span class="n">get_include</span><span class="p">(),</span> <span class="s">&#39;numpy&#39;</span><span class="p">)]</span>
</span><span class='line'>      <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;ll time the resulting function on the same sized array as we did previously:</p>

<pre><code>In [1]: import numpy as np

In [2]: from memview_bench_v2 import pairwise

In [3]: X = np.random.random((500, 3))

In [4]: timeit pairwise(X)
1 loops, best of 3: 668 ms per loop
</code></pre>

<p>That&#8217;s a factor of 10 speedup over the pure python version!  It turns out,
though, that we can do better.  In particular, the slicing operation when
we call <code>X[i]</code> and <code>X[j]</code> must generate a new numpy array each time, which
leads to a lot of python overhead in reference counting, etc.  This is the
reason that the cython team introduced typed memoryviews in cython v0.16.</p>

<h3>Typed Memoryviews</h3>

<p>The equivalent of the above code using typed memoryviews looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='cython'><span class='line'><span class="c"># memview_bench_v3.pyx</span>
</span><span class='line'><span class="k">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span><span class='line'>
</span><span class='line'><span class="k">cimport</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span><span class='line'><span class="k">from</span> <span class="nn">libc.math</span> <span class="k">cimport</span> <span class="n">sqrt</span>
</span><span class='line'><span class="k">cimport</span> <span class="nn">cython</span>
</span><span class='line'>
</span><span class='line'><span class="c"># define a function pointer to a metric</span>
</span><span class='line'><span class="k">ctypedef</span> <span class="n">double</span> <span class="p">(</span><span class="o">*</span><span class="n">metric_ptr</span><span class="p">)(</span><span class="n">double</span><span class="p">[::</span><span class="mf">1</span><span class="p">],</span> <span class="n">double</span><span class="p">[::</span><span class="mf">1</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@cython</span><span class="o">.</span><span class="n">boundscheck</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'><span class="nd">@cython</span><span class="o">.</span><span class="n">wraparound</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'><span class="k">cdef</span> <span class="kt">double</span> <span class="nf">euclidean_distance</span><span class="p">(</span><span class="n">double</span><span class="p">[::</span><span class="mf">1</span><span class="p">]</span> <span class="n">x1</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">double</span><span class="p">[::</span><span class="mf">1</span><span class="p">]</span> <span class="n">x2</span><span class="p">):</span>
</span><span class='line'>    <span class="k">cdef</span> <span class="kt">double</span> <span class="nf">tmp</span><span class="p">,</span> <span class="nf">d</span>
</span><span class='line'>    <span class="k">cdef</span> <span class="kt">np</span>.<span class="kt">intp_t</span> <span class="nf">i</span><span class="p">,</span> <span class="nf">N</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">d</span> <span class="o">=</span> <span class="mf">0</span>
</span><span class='line'>    <span class="n">N</span> <span class="o">=</span> <span class="n">x1</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mf">0</span><span class="p">]</span>
</span><span class='line'>    <span class="c"># assume x2 has the same shape as x1.  This could be dangerous!</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
</span><span class='line'>        <span class="n">tmp</span> <span class="o">=</span> <span class="n">x1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">x2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>        <span class="n">d</span> <span class="o">+=</span> <span class="n">tmp</span> <span class="o">*</span> <span class="n">tmp</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nd">@cython</span><span class="o">.</span><span class="n">boundscheck</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'><span class="nd">@cython</span><span class="o">.</span><span class="n">wraparound</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">pairwise</span><span class="p">(</span><span class="n">double</span><span class="p">[:,</span> <span class="p">::</span><span class="mf">1</span><span class="p">]</span> <span class="n">X</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">,</span>
</span><span class='line'>             <span class="n">metric</span> <span class="o">=</span> <span class="s">&#39;euclidean&#39;</span><span class="p">):</span>
</span><span class='line'>    <span class="k">cdef</span> <span class="kt">metric_ptr</span> <span class="nf">dist_func</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">metric</span> <span class="o">==</span> <span class="s">&#39;euclidean&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">dist_func</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">euclidean_distance</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;unrecognized metric&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">cdef</span> <span class="kt">np</span>.<span class="kt">intp_t</span> <span class="nf">i</span><span class="p">,</span> <span class="nf">j</span><span class="p">,</span> <span class="nf">n_samples</span>
</span><span class='line'>    <span class="n">n_samples</span> <span class="o">=</span> <span class="n">X</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mf">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">cdef</span> <span class="kt">double</span>[<span class="p">:,</span> <span class="p">::</span><span class="mf">1</span><span class="p">]</span> <span class="n">D</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">empty</span><span class="p">((</span><span class="n">n_samples</span><span class="p">,</span> <span class="n">n_samples</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n_samples</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n_samples</span><span class="p">):</span>
</span><span class='line'>            <span class="n">D</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">dist_func</span><span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">X</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">D</span>
</span></code></pre></td></tr></table></div></figure>


<p>The only change is that instead of using the <code>np.ndarray[...]</code> type specifier,
we use the typed memoryview <code>double[:, ::1]</code> specifier.  The <code>::1</code> in the
second position means that we are passing a two-dimensional array, which
is contiguous and C-ordered.  We time the results and see the following:</p>

<pre><code>In [1]: import numpy as np

In [2]: from memview_bench_v3 import pairwise

In [3]: X = np.random.random((500, 3))

In [4]: timeit pairwise(X)
10 loops, best of 3: 22 ms per loop
</code></pre>

<p>This gives another factor of 30 improvement over the previous version, simply
by switching to typed memoryviews rather than the numpy interface.  Still,
our function is creating memoryview objects each time we slice the array.  We
can determine how much overhead this is generating by using raw C pointers
instead.  It is not as clean, but it should be very fast:</p>

<h3>Raw Pointers</h3>

<p>The fundamental benchmark for this sort of operation should be working
directly with the pointers themselves.  While this is not a very &#8220;pythonic&#8221;
way of doing things, it does lead to very fast code, as we will see:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='cython'><span class='line'><span class="c"># memview_bench_v4.pyx</span>
</span><span class='line'><span class="k">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span><span class='line'>
</span><span class='line'><span class="k">cimport</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span><span class='line'><span class="k">from</span> <span class="nn">libc.math</span> <span class="k">cimport</span> <span class="n">sqrt</span>
</span><span class='line'><span class="k">cimport</span> <span class="nn">cython</span>
</span><span class='line'>
</span><span class='line'><span class="c"># define a function pointer to a metric</span>
</span><span class='line'><span class="k">ctypedef</span> <span class="n">double</span> <span class="p">(</span><span class="o">*</span><span class="n">metric_ptr</span><span class="p">)(</span><span class="n">double</span><span class="o">*</span><span class="p">,</span> <span class="n">double</span><span class="o">*</span><span class="p">,</span> <span class="nb">int</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@cython</span><span class="o">.</span><span class="n">boundscheck</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'><span class="nd">@cython</span><span class="o">.</span><span class="n">wraparound</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'><span class="k">cdef</span> <span class="kt">double</span> <span class="nf">euclidean_distance</span><span class="p">(</span><span class="n">double</span><span class="o">*</span> <span class="n">x1</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">double</span><span class="o">*</span> <span class="n">x2</span><span class="p">,</span>
</span><span class='line'>                               <span class="nb">int</span> <span class="n">N</span><span class="p">):</span>
</span><span class='line'>    <span class="k">cdef</span> <span class="kt">double</span> <span class="nf">tmp</span><span class="p">,</span> <span class="nf">d</span>
</span><span class='line'>    <span class="k">cdef</span> <span class="kt">np</span>.<span class="kt">intp_t</span> <span class="nf">i</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">d</span> <span class="o">=</span> <span class="mf">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
</span><span class='line'>        <span class="n">tmp</span> <span class="o">=</span> <span class="n">x1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">x2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>        <span class="n">d</span> <span class="o">+=</span> <span class="n">tmp</span> <span class="o">*</span> <span class="n">tmp</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nd">@cython</span><span class="o">.</span><span class="n">boundscheck</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'><span class="nd">@cython</span><span class="o">.</span><span class="n">wraparound</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">pairwise</span><span class="p">(</span><span class="n">double</span><span class="p">[:,</span> <span class="p">::</span><span class="mf">1</span><span class="p">]</span> <span class="n">X</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">,</span>
</span><span class='line'>             <span class="n">metric</span> <span class="o">=</span> <span class="s">&#39;euclidean&#39;</span><span class="p">):</span>
</span><span class='line'>    <span class="k">cdef</span> <span class="kt">metric_ptr</span> <span class="nf">dist_func</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">metric</span> <span class="o">==</span> <span class="s">&#39;euclidean&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">dist_func</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">euclidean_distance</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;unrecognized metric&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">cdef</span> <span class="kt">np</span>.<span class="kt">intp_t</span> <span class="nf">i</span><span class="p">,</span> <span class="nf">j</span><span class="p">,</span> <span class="nf">n_samples</span><span class="p">,</span> <span class="nf">n_dim</span>
</span><span class='line'>    <span class="n">n_samples</span> <span class="o">=</span> <span class="n">X</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mf">0</span><span class="p">]</span>
</span><span class='line'>    <span class="n">n_dim</span> <span class="o">=</span> <span class="n">X</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mf">1</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">cdef</span> <span class="kt">double</span>[<span class="p">:,</span> <span class="p">::</span><span class="mf">1</span><span class="p">]</span> <span class="n">D</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">empty</span><span class="p">((</span><span class="n">n_samples</span><span class="p">,</span> <span class="n">n_samples</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">cdef</span> <span class="kt">double</span>* <span class="nf">Dptr</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">D</span><span class="p">[</span><span class="mf">0</span><span class="p">,</span> <span class="mf">0</span><span class="p">]</span>
</span><span class='line'>    <span class="k">cdef</span> <span class="kt">double</span>* <span class="nf">Xptr</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">X</span><span class="p">[</span><span class="mf">0</span><span class="p">,</span> <span class="mf">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n_samples</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n_samples</span><span class="p">):</span>
</span><span class='line'>            <span class="n">Dptr</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="n">n_samples</span> <span class="o">+</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">dist_func</span><span class="p">(</span><span class="n">Xptr</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="n">n_dim</span><span class="p">,</span>
</span><span class='line'>                                                <span class="n">Xptr</span> <span class="o">+</span> <span class="n">j</span> <span class="o">*</span> <span class="n">n_dim</span><span class="p">,</span>
</span><span class='line'>                                                <span class="n">n_dim</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">D</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead of passing around slices of arrays, we&#8217;ve accessed the raw memory
buffer using C pointer syntax.  This is not as easy to read, and can lead
to <code>glibc</code> errors or segmentation faults if we&#8217;re not careful.  Testing
this implementation, we find that it is extremely fast:</p>

<pre><code>In [1]: import numpy as np

In [2]: from memview_bench_v4 import pairwise

In [3]: X = np.random.random((500, 3))

In [4]: timeit pairwise(X)
100 loops, best of 3: 2.47 ms per loop
</code></pre>

<p>This is another factor of 10 faster than the memoryview benchmark above!
Essentially, what this is telling us is that creating a memoryview slice
takes about 0.02 / 500,000 = 40 nanoseconds on our machine.  This is extremely
fast, but because we&#8217;re performing this operation half a million times, the
cost of the allocations is significant compared to the rest of our
computation.  If our vectors were, say, length 1000, this cost may not be
a significant percentage of the total cost.</p>

<p>So what are we left with?  Do we need to use raw pointers in all circumstances
when working with collections of small vectors?  Perhaps not.</p>

<h3>A Faster Implementation with Memoryviews</h3>

<p>The creation of memoryview slices, though extremely fast, is causing a problem
simply because we&#8217;re creating so many slices.  Here is an alternative which
uses no raw pointers, but matches the speed of raw pointers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='cython'><span class='line'><span class="c"># memview_bench_v5.pyx</span>
</span><span class='line'><span class="k">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span><span class='line'>
</span><span class='line'><span class="k">cimport</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span><span class='line'><span class="k">from</span> <span class="nn">libc.math</span> <span class="k">cimport</span> <span class="n">sqrt</span>
</span><span class='line'><span class="k">cimport</span> <span class="nn">cython</span>
</span><span class='line'>
</span><span class='line'><span class="c"># define a function pointer to a metric</span>
</span><span class='line'><span class="k">ctypedef</span> <span class="n">double</span> <span class="p">(</span><span class="o">*</span><span class="n">metric_ptr</span><span class="p">)(</span><span class="n">double</span><span class="p">[:,</span> <span class="p">::</span><span class="mf">1</span><span class="p">],</span> <span class="n">np</span><span class="o">.</span><span class="n">intp_t</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">intp_t</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@cython</span><span class="o">.</span><span class="n">boundscheck</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'><span class="nd">@cython</span><span class="o">.</span><span class="n">wraparound</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'><span class="k">cdef</span> <span class="kt">double</span> <span class="nf">euclidean_distance</span><span class="p">(</span><span class="n">double</span><span class="p">[:,</span> <span class="p">::</span><span class="mf">1</span><span class="p">]</span> <span class="n">X</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">np</span><span class="o">.</span><span class="n">intp_t</span> <span class="n">i1</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">intp_t</span> <span class="n">i2</span><span class="p">):</span>
</span><span class='line'>    <span class="k">cdef</span> <span class="kt">double</span> <span class="nf">tmp</span><span class="p">,</span> <span class="nf">d</span>
</span><span class='line'>    <span class="k">cdef</span> <span class="kt">np</span>.<span class="kt">intp_t</span> <span class="nf">j</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">d</span> <span class="o">=</span> <span class="mf">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">X</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mf">1</span><span class="p">]):</span>
</span><span class='line'>        <span class="n">tmp</span> <span class="o">=</span> <span class="n">X</span><span class="p">[</span><span class="n">i1</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">-</span> <span class="n">X</span><span class="p">[</span><span class="n">i2</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span>
</span><span class='line'>        <span class="n">d</span> <span class="o">+=</span> <span class="n">tmp</span> <span class="o">*</span> <span class="n">tmp</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nd">@cython</span><span class="o">.</span><span class="n">boundscheck</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'><span class="nd">@cython</span><span class="o">.</span><span class="n">wraparound</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">pairwise</span><span class="p">(</span><span class="n">double</span><span class="p">[:,</span> <span class="p">::</span><span class="mf">1</span><span class="p">]</span> <span class="n">X</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">,</span>
</span><span class='line'>             <span class="n">metric</span> <span class="o">=</span> <span class="s">&#39;euclidean&#39;</span><span class="p">):</span>
</span><span class='line'>    <span class="k">cdef</span> <span class="kt">metric_ptr</span> <span class="nf">dist_func</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">metric</span> <span class="o">==</span> <span class="s">&#39;euclidean&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">dist_func</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">euclidean_distance</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;unrecognized metric&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">cdef</span> <span class="kt">np</span>.<span class="kt">intp_t</span> <span class="nf">i</span><span class="p">,</span> <span class="nf">j</span><span class="p">,</span> <span class="nf">n_samples</span><span class="p">,</span> <span class="nf">n_dim</span>
</span><span class='line'>    <span class="n">n_samples</span> <span class="o">=</span> <span class="n">X</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mf">0</span><span class="p">]</span>
</span><span class='line'>    <span class="n">n_dim</span> <span class="o">=</span> <span class="n">X</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mf">1</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">cdef</span> <span class="kt">double</span>[<span class="p">:,</span> <span class="p">::</span><span class="mf">1</span><span class="p">]</span> <span class="n">D</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">empty</span><span class="p">((</span><span class="n">n_samples</span><span class="p">,</span> <span class="n">n_samples</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n_samples</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n_samples</span><span class="p">):</span>
</span><span class='line'>            <span class="n">D</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">dist_func</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">D</span>
</span></code></pre></td></tr></table></div></figure>


<p>Timing this implementation we find the following:</p>

<pre><code>In [1]: import numpy as np

In [2]: from memview_bench_v5 import pairwise

In [3]: X = np.random.random((500, 3))

In [4]: timeit pairwise(X)
100 loops, best of 3: 2.45 ms per loop
</code></pre>

<p>Just as fast as using raw pointers, but much cleaner and easier to read.</p>

<h3>Summary</h3>

<p>Here are the timing results we&#8217;ve seen above:</p>

<ul>
<li><strong>Python + numpy</strong>: 6510 ms</li>
<li><strong>Cython + numpy</strong>: 668 ms</li>
<li><strong>Cython + memviews (slicing)</strong>: 22 ms</li>
<li><strong>Cython + raw pointers</strong>: 2.47 ms</li>
<li><strong>Cython + memviews (no slicing)</strong>: 2.45 ms</li>
</ul>


<p>So what have we learned here?  First of all, typed memoryviews are fast.
Blazing fast.  If used correctly, they can be comparable to raw pointers,
but are much cleaner easier to debug.  For example, in the last
version, if we ran into a memory error we could simply turn on bounds-checking
and quickly find the source of the problem.  Slicing with memoryviews is
also fast, but should be used carefully if your operation time on each slice
is compararable to the cost of building the slice.</p>

<p>The moral of the story?  <em>Use typed memoryviews.</em>  It will lead to fast cython
code which is cleaner, more readable, and more easily debuggable than any other
alternative.</p>

<p><strong>Update</strong>: All of the above scripts are now available as an ipython
notebook: <a href="http://jakevdp.github.com/scripts/memview_bench.ipynb">memview_bench.ipynb</a>.
For information on how to view this file, see the
<a href="http://ipython.org/ipython-doc/dev/interactive/htmlnotebook.html">IPython page</a>
Alternatively, you can view this notebook (but not modify it) using the
nbviewer <a href="http://nbviewer.ipython.org/url/jakevdp.github.com/scripts/memview_bench.ipynb">here</a>.</p>

<p>Thanks to Dave for the tip.</p>
]]></content>
  </entry>
  
</feed>
